I"¾3<p>In this post, I will implement Thompson Sampling in a Bernouli bandit problem in Python and compare it with the performance of the greedy algorithm. This page 
is simply implementing the algorithms elegantly explained in <a href="https://arxiv.org/pdf/1707.02038.pdf">this paper.</a></p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">math</span> 
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span></code></pre></figure>

<p>This is the implementation of the greedy algorithm in the paper</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">greedy_update_posterior_params</span><span class="p">(</span><span class="n">T</span><span class="p">,</span> <span class="n">rewards</span><span class="p">):</span>
    <span class="n">beta</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">rewards</span><span class="p">]</span>
    <span class="n">alpha</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">rewards</span><span class="p">]</span>
    <span class="n">bins</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">T</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">theta</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">rewards</span><span class="p">)):</span>
            <span class="n">theta</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">alpha</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">/</span><span class="p">(</span><span class="n">alpha</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">+</span><span class="n">beta</span><span class="p">[</span><span class="n">k</span><span class="p">]))</span>
        <span class="n">max_idx</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">rewards</span><span class="p">)),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">i</span><span class="p">:</span><span class="n">theta</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">rewards</span><span class="p">[</span><span class="n">max_idx</span><span class="p">]</span>
        <span class="n">beta</span><span class="p">[</span><span class="n">max_idx</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">-</span><span class="n">r</span>
        <span class="n">alpha</span><span class="p">[</span><span class="n">max_idx</span><span class="p">]</span> <span class="o">+=</span> <span class="n">r</span>
        <span class="k">if</span> <span class="n">t</span> <span class="o">%</span> <span class="mi">100</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">rewards</span><span class="p">)):</span>
                <span class="n">armj</span> <span class="o">=</span> <span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">beta</span><span class="p">(</span><span class="n">alpha</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">beta</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1000</span><span class="p">)]</span>
                <span class="n">plt</span><span class="p">.</span><span class="n">hist</span><span class="p">(</span><span class="n">armj</span><span class="p">,</span> <span class="n">bins</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'arm {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">j</span><span class="p">))</span>
            <span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="s">'upper right'</span><span class="p">)</span>
            <span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
         
    <span class="k">return</span> <span class="n">alpha</span><span class="p">,</span> <span class="n">beta</span></code></pre></figure>

<p>Here is also the implementation of the Thompson Sampling algorithm for the Bernoulli bandit with Beta prior distribtuion.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">thompson_sampling_update_posterior_params</span><span class="p">(</span><span class="n">T</span><span class="p">,</span> <span class="n">rewards</span><span class="p">):</span>
    <span class="n">beta</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">rewards</span><span class="p">]</span>
    <span class="n">alpha</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">rewards</span><span class="p">]</span>
    <span class="n">bins</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">T</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">theta</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">beta</span><span class="p">(</span><span class="n">alpha</span><span class="p">,</span> <span class="n">beta</span><span class="p">).</span><span class="n">tolist</span><span class="p">()</span>
        <span class="n">max_idx</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">rewards</span><span class="p">)),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">i</span><span class="p">:</span><span class="n">theta</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">rewards</span><span class="p">[</span><span class="n">max_idx</span><span class="p">]</span>
        <span class="n">beta</span><span class="p">[</span><span class="n">max_idx</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">-</span><span class="n">r</span>
        <span class="n">alpha</span><span class="p">[</span><span class="n">max_idx</span><span class="p">]</span> <span class="o">+=</span> <span class="n">r</span>
        <span class="k">if</span> <span class="n">t</span> <span class="o">%</span> <span class="mi">100</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">rewards</span><span class="p">)):</span>
                <span class="n">armj</span> <span class="o">=</span> <span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">beta</span><span class="p">(</span><span class="n">alpha</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">beta</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1000</span><span class="p">)]</span>
                <span class="n">plt</span><span class="p">.</span><span class="n">hist</span><span class="p">(</span><span class="n">armj</span><span class="p">,</span> <span class="n">bins</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'arm {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">j</span><span class="p">))</span>
            <span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="s">'upper right'</span><span class="p">)</span>
            <span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
            
    <span class="k">return</span> <span class="n">alpha</span><span class="p">,</span> <span class="n">beta</span></code></pre></figure>

<p>Here is the result of running these algorithms</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">alpha</span><span class="p">,</span> <span class="n">beta</span> <span class="o">=</span> <span class="n">greedy_update_posterior_params</span><span class="p">(</span><span class="mi">500</span><span class="p">,</span>  <span class="p">[</span><span class="mf">0.1</span><span class="p">,</span><span class="mf">0.8</span><span class="p">,</span><span class="mf">0.6</span><span class="p">,</span><span class="mf">0.3</span><span class="p">])</span></code></pre></figure>

<p><img src="greedy.png" alt="Greedy Algorithms" /></p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">alpha</span><span class="p">,</span> <span class="n">beta</span> <span class="o">=</span> <span class="n">thompson_sampling_update_posterior_params</span><span class="p">(</span><span class="mi">500</span><span class="p">,</span>  <span class="p">[</span><span class="mf">0.1</span><span class="p">,</span><span class="mf">0.8</span><span class="p">,</span><span class="mf">0.6</span><span class="p">,</span><span class="mf">0.3</span><span class="p">])</span></code></pre></figure>

<p><img src="thompson.png" alt="Thompson Sampling" />
A summary of this code is available in <a href="https://github.com/kiskani/kiskani.github.io/blob/master/multi-armed-bandits/2019/12/29/Thompson-sampling.ipynb">this notebook.</a></p>
:ET